<h1>Word</h1>
<!-- <div style='width: 800px;'>
  <div id="map" style='width: 800px; height: 400px;'></div>
</div> -->
    <input id="origin-input" class="controls" type="text"
        placeholder="Enter an origin location">

    <input id="destination-input" class="controls" type="text"
        placeholder="Enter a destination location">

<div id="map" style="width:800px;height:800px;"></div>
<script>
  function initialize() {
    var bounds = new google.maps.LatLngBounds();
    var markers = [[47.6000, -122.3329, 'Location here'],[47.6094, -122.3335, 'Location there']];
    // myLatLng is for the center of the map
    var myLatLng = new google.maps.LatLng(47.6097, -122.3331);
    // mapProp = map options
    var mapProp = {
      mapTypeControl: false,
      center: myLatLng,
      zoom:16
    };
    // map = create the map and rendering on page
    var map = new google.maps.Map(document.getElementById("map"),mapProp);

    var startMark = new google.maps.Marker({
      position: myLatLng,
      icon: 'pin.png'
    });

//----------------------- add a listener to map point --------------------

    // var infoWindowContent = [
    //   ['<div class="info_content">' +
    //   '<h3>London Eye</h3>' +
    //   '<p>The London Eye is a giant Ferris wheel situated on the banks of the River Thames. The entire structure is 135 metres (443 ft) tall and the wheel has a diameter of 120 metres (394 ft).</p>' +        '</div>'],
    //   ['<div class="info_content">' +
    //   '<h3>Palace of Westminster</h3>' +
    //   '<p>The Palace of Westminster is the meeting place of the House of Commons and the House of Lords, the two houses of the Parliament of the United Kingdom. Commonly known as the Houses of Parliament after its tenants.</p>' +
    //   '</div>']
    // ];

    // var infoWindow = new google.maps.InfoWindow(), marker, i:
    // for(i = 0; i < markers.length; i++){
    //   var position = new google.maps.LatLng(markers[i][0], markers[i][1]);
    //   bounds.extend(position);
    //   marker = new google.maps.Marker({
    //     position: position,
    //     title: markers[i][2]
    //   });

      // google.maps.event.addListener(marker, 'click', (function(marker, i) {
      //   return function() {
      //     infoWindow.setContent(infoWindowContent[i][0]);
      //     infoWindow.open(map, marker);
      //   }
      // })(marker, i));
      // map.fitBounds(bounds);
      // marker.setMap(map);
    // };
    startMark.setMap(map);
  // var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
  //   this.setZoom(14);
  //   google.maps.event.removeListener(boundsListener);
  // });

//------------------- end of add a listener -----------------

    //----------------- add a route -------------------//
    // var directionDisplay = new google.maps.DirectionsRenderer();
    // //{map: map})
    // var start = new google.maps.LatLng(47.6080, -122.3330);
    // var end = new google.maps.LatLng(47.6085, -122.3336);

    // var request = {
    //   origin: end,
    //   destination: start,
    //   travelMode: google.maps.TravelMode.TRANSIT
    // }

    // var directionsService = new google.maps.DirectionsService();
    // directionsService.route(request, function(response, status) {
    //   if (status == google.maps.DirectionsStatus.OK) {
    //     directionDisplay.setDirections(response);
    //   }
    // });
    // directionDisplay.setMap(map);
    //-----------------end of add a route---------------


    //-----------------auto-complete directions-------------------//
  var origin_place_id = null;
  var destination_place_id = null;
  var travel_mode = google.maps.TravelMode.WALKING;
  var directionsService = new google.maps.DirectionsService;
  var directionsDisplay = new google.maps.DirectionsRenderer;
  directionsDisplay.setMap(map);

  var origin_input = document.getElementById('origin-input');
  var destination_input = document.getElementById('destination-input');
  var modes = document.getElementById('mode-selector');

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);

  var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
  origin_autocomplete.bindTo('bounds', map);
  var destination_autocomplete =
      new google.maps.places.Autocomplete(destination_input);
  destination_autocomplete.bindTo('bounds', map);

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, mode) {
    var radioButton = document.getElementById(id);
    radioButton.addEventListener('click', function() {
      travel_mode = mode;
    });
  }
  setupClickListener('changemode-walking', google.maps.TravelMode.WALKING);
  setupClickListener('changemode-transit', google.maps.TravelMode.TRANSIT);
  setupClickListener('changemode-driving', google.maps.TravelMode.DRIVING);

  function expandViewportToFitPlace(map, place) {
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);
    }
  }

  origin_autocomplete.addListener('place_changed', function() {
    var place = origin_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    origin_place_id = place.place_id;
    route(origin_place_id, destination_place_id, travel_mode,
          directionsService, directionsDisplay);
  });

  destination_autocomplete.addListener('place_changed', function() {
    var place = destination_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    destination_place_id = place.place_id;
    route(origin_place_id, destination_place_id, travel_mode,
          directionsService, directionsDisplay);
  });

  function route(origin_place_id, destination_place_id, travel_mode,
                 directionsService, directionsDisplay) {
    if (!origin_place_id || !destination_place_id) {
      return;
    }
    directionsService.route({
      origin: {'placeId': origin_place_id},
      destination: {'placeId': destination_place_id},
      travelMode: travel_mode
    }, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {

//------------------------- the below code is for finding each change of direction allow a path-----------------------
//http://www.mapquestapi.com/common/encodedecode.html

        // console.log(response.routes[0].legs[0].steps)
        // for(var i = 0; i < response.routes[0].legs[0].steps.length; i++) {
        //   console.log(response.routes[0].legs[0].steps[i].encoded_lat_lngs);
        //   var encoded = response.routes[0].legs[0].steps[i].encoded_lat_lngs;

        //   decompress(encoded, 7);

        //   function decompress (encoded, precision) {
        //    precision = Math.pow(10, -precision);
        //    var len = encoded.length, index=0, lat=0, lng = 0, array = [];
        //    while (index < len) {
        //       var b, shift = 0, result = 0;
        //       do {
        //          b = encoded.charCodeAt(index++) - 63;
        //          result |= (b & 0x1f) << shift;
        //          shift += 5;
        //       } while (b >= 0x20);
        //       var dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
        //       lat += dlat;
        //       shift = 0;
        //       result = 0;
        //       do {
        //          b = encoded.charCodeAt(index++) - 63;
        //          result |= (b & 0x1f) << shift;
        //          shift += 5;
        //       } while (b >= 0x20);
        //       var dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
        //       lng += dlng;
        //       array.push(lat * precision);
        //       array.push(lng * precision);
        //    }
        //    console.log(array);
        // }
        // }
        // console.log(response.routes[0].legs[0].steps)

//----------------------- end of code for change of direction ---------------------

        directionsDisplay.setDirections(response);
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  }
}

    //this line calls the initialize function upon page load
  google.maps.event.addDomListener(window, 'load', initialize);
</script>
<script>
//   handler = Gmaps.build('Google');
//   handler.buildMap({ provider: {}, internal: {id: 'map2'}}, function(){

//     markers = handler.addMarkers([
//       {
//         "lat": 47.122,
//         "lng": -122.39,
//         "picture": {
//           "url": "http://people.mozilla.com/~faaborg/files/shiretoko/firefoxIcon/firefox-32.png",
//           "width":  50,
//           "height": 50
//         },
//         "infowindow": "hello!"
//       }
//     ]);

//     handler.bounds.extendWith(markers);
//     handler.fitMapToBounds();
//   });
// </script>